{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sn\n",
    "import sys\n",
    "\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1> ESTATISTICA APLICADA À COMPUTAÇÃO"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1> Atividade 1.1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Condição do comicilio - Qualitativa <br />\n",
    "Condição da rua - Qualitativa <br />\n",
    "Tipo de imovel - Qualitativa <br />\n",
    "Informação sobre renda - Quantitativa <br />\n",
    "Classificação economica - Qualitativa <br />\n",
    "Número de pessoas no domicilio - Quantitativa <br /> \n",
    "Presença de crianças e adolescentes - Qualitativa <br />\n",
    "Quantidade de crianças e adolescentes - Quantitativa <br />\n",
    "Grau de instrução do chefe e da dona de casa – Qualitativa <br />\n",
    "Condição de atividade do chefe - Qualitativa <br />\n",
    "Presença de geladeira, maquinta de lavar, etc. - Qualitativa <br />"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1> Atividade 1.2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "M    14\n",
       "F     9\n",
       "dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sexo = pd.Series(['M','F','F','M','M','M','F','F','M','M','M','M','M','F','M','M','F','F','M','M','M','F','F'])\n",
    "sexo = sexo.value_counts()\n",
    "sexo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sexo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>M</th>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>F</th>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sexo\n",
       "M    14\n",
       "F     9"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.DataFrame(sexo,index=['M','F'])\n",
    "df.columns = ['sexo']\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1> Atividade 1.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x250d04ccfd0>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.plot.pie(y='sexo', figsize=(6,6))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x250d0512a58>"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.plot.bar(y='sexo')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1> Atividade 1.4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    5\n",
       "3    3\n",
       "2    3\n",
       "1    3\n",
       "4    1\n",
       "dtype: int64"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numerodependentes = pd.Series([3,1,0,0,1,3,4,2,2,3,0,2,0,1,0])\n",
    "numerodependentes = numerodependentes.value_counts()\n",
    "numerodependentes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Numero de dependentes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Numero de dependentes\n",
       "0                      5\n",
       "1                      3\n",
       "2                      3\n",
       "3                      3\n",
       "4                      1"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2 = pd.DataFrame(numerodependentes)\n",
    "df2.columns = ['Numero de dependentes']\n",
    "df2 = df2.sort_index()\n",
    "df2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1> Atividade 1.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0,0.5,'Número de funcionarios')"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df2.plot.bar(y='Numero de dependentes')\n",
    "plt.xlabel('Número de dependentes')\n",
    "plt.ylabel('Número de funcionarios')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1> Exercicio 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "a) Variaveis qualitativas: Sexo e materia predileta, Variavel quantitativa discreta: nota – numero de questoes certas. <br />"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sexo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>M</th>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>F</th>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sexo\n",
       "M    21\n",
       "F    21"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sexo2 = pd.Series(['F','M','F','F','M','M','F','F','F','M','F','M','M','M','M','M','F','F','M','M','F','F','M','M','F','F','M','M','F','F','F','M','M','F','M','M','F','M','F','F','F','M'])\n",
    "sexo2 = sexo2.value_counts()\n",
    "df3 = pd.DataFrame(sexo2)\n",
    "df3.columns = ['sexo']\n",
    "df3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x250d0a734e0>"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df3.plot.pie(y='sexo', figsize=(6,6))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Materia Predileta</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>G</th>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>H</th>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>M</th>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>P</th>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Materia Predileta\n",
       "C                  3\n",
       "G                  8\n",
       "H                  7\n",
       "M                 14\n",
       "P                 10"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "materiapredileta = pd.Series(['H','M','P','H','C','H','M','P','H','C','P','M','G','G','M','M','P','G','G','P','M','G','H','M','P','G','C','H','M','P','M','G','H','M','P','G','M','P','M','M','P','M'])\n",
    "materiapredileta = materiapredileta.value_counts()\n",
    "df4 = pd.DataFrame(materiapredileta)\n",
    "df4.columns = ['Materia Predileta']\n",
    "df4 = df4.sort_index()\n",
    "df4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x250d0b29ba8>"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df4.plot.bar(y= 'Materia Predileta')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Notas</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Notas\n",
       "1      1\n",
       "2      2\n",
       "3      1\n",
       "4      3\n",
       "5     11\n",
       "6      7\n",
       "7      5\n",
       "8      8\n",
       "9      5"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "notas = pd.Series([5,8,8,6,5,6,8,4,2,6,8,2,4,9,9,7,1,8,5,9,5,8,6,3,5,5,5,7,4,7,7,6,6,9,8,5,6,7,5,5,5,9,8])\n",
    "notas = notas.value_counts()\n",
    "df5 = pd.DataFrame(notas)\n",
    "df5.columns = ['Notas']\n",
    "df5 = df5.sort_index()\n",
    "df5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x250d0c0dba8>"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df5.plot.bar(y='Notas')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1> Exercicio 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Refrigerantes</th>\n",
       "      <th>%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Colas</td>\n",
       "      <td>51.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Guarana</td>\n",
       "      <td>24.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Laranja</td>\n",
       "      <td>10.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Limao</td>\n",
       "      <td>5.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Uva</td>\n",
       "      <td>3.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Tuti Fruti</td>\n",
       "      <td>1.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Tonica</td>\n",
       "      <td>0.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Citrico</td>\n",
       "      <td>0.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Maca</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Outros Sabores</td>\n",
       "      <td>2.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Refrigerantes     %\n",
       "0           Colas  51.1\n",
       "1         Guarana  24.4\n",
       "2         Laranja  10.9\n",
       "3           Limao   5.9\n",
       "4             Uva   3.2\n",
       "5      Tuti Fruti   1.1\n",
       "6          Tonica   0.7\n",
       "7         Citrico   0.1\n",
       "8            Maca   0.5\n",
       "9  Outros Sabores   2.1"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df6 = pd.DataFrame({'Refrigerantes':['Colas', 'Guarana', 'Laranja', 'Limao','Uva', 'Tuti Fruti', 'Tonica', 'Citrico', 'Maca', 'Outros Sabores'], '%':[51.1,24.4,10.9,5.9,3.2,1.1,0.7,0.1,0.5,2.1]})\n",
    "df6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x250d1df8198>"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df6.plot.bar(y='%', x = 'Refrigerantes')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<H1>Exercicio 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1>Falta Fazer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1>Exercicio 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Conglomerados</th>\n",
       "      <th>%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>GM</td>\n",
       "      <td>22.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Ford</td>\n",
       "      <td>16.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Volks</td>\n",
       "      <td>9.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Toyota</td>\n",
       "      <td>9.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Renault</td>\n",
       "      <td>8.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Chrysler</td>\n",
       "      <td>8.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Outras</td>\n",
       "      <td>24.8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Conglomerados     %\n",
       "0            GM  22.8\n",
       "1          Ford  16.8\n",
       "2         Volks   9.4\n",
       "3        Toyota   9.2\n",
       "4       Renault   8.7\n",
       "5      Chrysler   8.3\n",
       "6        Outras  24.8"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df7 = pd.DataFrame({'Conglomerados':['GM','Ford','Volks', 'Toyota','Renault', 'Chrysler', 'Outras'],'%':[22.8,16.8,9.4,9.2,8.7,8.3,24.8]})\n",
    "df7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x250d1e5c828>"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df7.plot.bar(y='%', x = 'Conglomerados')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
